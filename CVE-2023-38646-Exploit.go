package main

import (
	"fmt"
	"net/http"
	"os"
	"bufio"
	"strings"
	"flag"
	"encoding/json"
	"log"
)

func getSetupToken(ipAddress string, lineNumber int) {
	endpoint := "/api/session/properties"
	protocols := []string{"https://", "http://"}

	for _, protocol := range protocols {
		url := fmt.Sprintf("%s%s%s", protocol, ipAddress, endpoint)
		response, err := http.Get(url)
		if err == nil {
			defer response.Body.Close()

			if response.StatusCode == 200 {
				var data map[string]interface{}
				if err := json.NewDecoder(response.Body).Decode(&data); err == nil {
					setupToken, exists := data["setup-token"]
					if exists && setupToken != nil {
						fmt.Printf("%d. Vulnerable Metabase Instance:-\n", lineNumber)
						fmt.Printf("             IP: %s\n", ipAddress)
						fmt.Printf("             Setup Token: %v\n\n", setupToken)
					} else {
						fmt.Printf("%d. Setup token not found or is null for IP: %s\n\n", lineNumber, ipAddress)
					}
				} else {
					log.Printf("Error decoding JSON response for IP: %s\n", ipAddress)
				}
				return // exit the function if request was successful
			}
		} else {
			fmt.Printf("Failed to connect using %s for %s. Trying next protocol...\n", strings.ToUpper(protocol[:len(protocol)-3]), ipAddress)
		}
	}

	fmt.Printf("%d. Failed to connect to %s using both HTTP and HTTPS.\n\n", lineNumber, ipAddress)
}

func main() {
	ipPtr := flag.String("ip", "", "IP address")
	listPtr := flag.String("list", "", "Filename containing list of IP addresses")
	flag.Parse()

	if *ipPtr != "" {
		getSetupToken(*ipPtr, 0)
	} else if *listPtr != "" {
		file, err := os.Open(*listPtr)
		if err != nil {
			log.Fatalf("Error opening file: %s\n", err)
		}
		defer file.Close()

		scanner := bufio.NewScanner(file)
		lineNumber := 1
		for scanner.Scan() {
			ipAddress := strings.TrimSpace(scanner.Text())
			getSetupToken(ipAddress, lineNumber)
			lineNumber++
		}

		if err := scanner.Err(); err != nil {
			log.Fatalf("Error reading file: %s\n", err)
		}
	} else {
		fmt.Println("Please provide either an IP address or a file containing a list of IP addresses.")
	}
}
